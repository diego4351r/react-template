$breakpoints: (
  tablet: 640px,
  laptop: 1024px,
  desktop: 1440px,
);

@mixin responsive($key){
  @if map-has-key($breakpoints, $key){
    @media only screen and (min-width: map-get($breakpoints, $key)){
      @content;
    }
  } @else {
      @media only screen and (min-width: $key){
        @content;
      }
  }
};

@mixin reset-list {
  list-style: none;
  padding-left: 0;
  margin-top: 0;
  margin-bottom: 0;
};

@mixin center{
  margin-left: auto;
  margin-right: auto;
}

@mixin pseudo($width: auto, $height: auto) {
  content: '';
  position: absolute;
  width: $width;
  height: $height;
  @content;
};

@mixin grid($columns, $gap){
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;

  @include responsive(480px) {
    grid-template-columns: 1fr;
    gap: 0em
    }
};  

@mixin gridAuto($min-width) {
  @supports(grid-area: auto) {
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  }
}



@mixin position($position: absolute, $top: null, $right: null, $bottom: null, $left: null, $z-index: initial) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $z-index;
}


/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color 
/// @param {Length} $size [1em] - Triangle size



@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;
  
  $perpendicular-borders: $size solid transparent;
  
  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}


@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    font-style: $style;
    font-weight: $weight;
    src: url($file-name + '.eot');
    src:
      url($file-name + '.eot?#iefix') format('embedded-opentype'),
      url($file-name + '.woff') format('woff'),
      url($file-name + '.ttf') format('truetype'),
      url($file-name + '.svg##{$font-name}') format('svg');
  }
}




